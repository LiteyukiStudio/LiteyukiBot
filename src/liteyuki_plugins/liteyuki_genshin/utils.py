import os

from PIL import Image

from ...liteyuki_api.config import Path
from ...liteyuki_api.utils import clamp, download_file

liteyuki_sign = "Generated by LiteyukiBot4.0   Powered by Enka.Network"
data_lost = "数据缺失，请先发送「原神资源更新」以更新资源"
uid_info_error = "UID信息不存在或Enka不稳定请求失败，请稍后再试"
resource_pool = {
    "characters.json": "https://raw.kgithub.com/mrwan200/enkanetwork.py-data/master/exports/data/characters.json",
    "characters_enka.json": "https://raw.kgithub.com/EnkaNetwork/API-docs/master/store/characters.json",
    "loc.json": "https://raw.kgithub.com/EnkaNetwork/API-docs/master/store/loc.json",
    "AvatarExcelConfigData.json": "https://git.crepe.moe/grasscutters/Grasscutter_Resources/-/raw/3.3/Resources/ExcelBinOutput/AvatarExcelConfigData.json?inline=false",
    "AvatarSkillDepotExcelConfigData.json": "https://git.crepe.moe/grasscutters/Grasscutter_Resources/-/raw/3.3/Resources/ExcelBinOutput/AvatarSkillDepotExcelConfigData.json"
                                            "?inline=false",
}
elements = {
    "Rock": "geo",
    "Wind": "Anemo",
    "Water": "Hydro",
    "Electric": "Electro",
    "Fire": "Pyro",
    "Ice": "Cryo",
    "Grass": "Dendro",
    "Unknown": "Unknown"
}
servers = {
    "1": "天空岛",
    "2": "天空岛",
    "5": "世界树",
    "6": "America",
    "7": "Europe",
    "8": "Asia",
    "9": "TW,HK,Mo"
}


def wish_img_crop(img: Image.Image):
    w, h = img.size
    if w > h:
        img = img.crop(((w - h) // 2, 0, (w + h) // 2, h))
    elif w < h:
        img = img.crop((0, (h - w) // 2, w, (h + w) // 2))
    img = img.convert("RGBA")
    img = img.resize((1000, 1000))
    x_size = 320
    up_size, down_size = 100, 150
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            if x in range(0, x_size) or x in range(img.size[0] - x_size, img.size[0]):
                p = list(img.getpixel((x, y)))
                """距离边缘的距离"""
                cd = min(abs(x), abs(x - img.size[0]))
                light = clamp(cd / x_size, 0, 1)
                p[3] = int(p[3] * light ** 2)
                img.putpixel((x, y), tuple(p))
            if y in range(0, up_size):
                p = list(img.getpixel((x, y)))
                """距离边缘的距离"""
                cd = y
                light = clamp(cd / up_size, 0, 1)
                p[3] = int(p[3] * light ** 2)
                img.putpixel((x, y), tuple(p))
            if y in range(img.size[1] - down_size, img.size[1]):
                p = list(img.getpixel((x, y)))
                """距离边缘的距离"""
                cd = abs(img.size[1] - y)
                light = clamp(cd / down_size, 0, 1)
                p[3] = int(p[3] * light ** 2)
                img.putpixel((x, y), tuple(p))

    return img


def get_lang_word(key: str, lang: str = "zh-CN", loc=None):
    if loc is None:
        loc = {}
    return loc.get(lang, loc["en"]).get(key, "None")


def resource_detect(texture: str):
    # 检测enka图片资源是否存在于本地，不存在就下载，无需带png
    if not os.path.exists(os.path.join(Path.cache, "genshin", "%s.png" % texture)):
        download_file(url="https://enka.network/ui/%s.png" % texture,
                      file=os.path.join(Path.cache, "genshin", "%s.png" % texture))
    else:
        pass
