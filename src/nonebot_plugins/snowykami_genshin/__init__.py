import json
import ntpath
import os.path
import traceback
from typing import Union

import aiofiles
import aiohttp
from nonebot.params import CommandArg
from nonebot.typing import T_State
from nonebot.utils import run_sync
from nonebot.adapters.onebot.v11 import GroupMessageEvent, PrivateMessageEvent, Bot, Message, MessageSegment
from nonebot import on_command, on_endswith, on_message
from nonebot.permission import SUPERUSER
from PIL import Image, ImageEnhance
from nonebot.rule import Rule

from ...liteyuki_api.data import Data
from ...liteyuki_api.utils import clamp, Command, download_file
from ...liteyuki_api.config import *
import time

resource_pool = {
    "characters.json": "https://raw.kgithub.com/mrwan200/enkanetwork.py-data/master/exports/data/characters.json",
    "characters_enka.json": "https://raw.kgithub.com/EnkaNetwork/API-docs/master/store/characters.json",
    "loc.json": "https://raw.kgithub.com/EnkaNetwork/API-docs/master/store/loc.json",
    "AvatarExcelConfigData.json": "https://git.crepe.moe/grasscutters/Grasscutter_Resources/-/raw/3.3/Resources/ExcelBinOutput/AvatarExcelConfigData.json?inline=false",
    "AvatarSkillDepotExcelConfigData.json": "https://git.crepe.moe/grasscutters/Grasscutter_Resources/-/raw/3.3/Resources/ExcelBinOutput/AvatarSkillDepotExcelConfigData.json"
                                            "?inline=false",
}
elements = {
    "Rock": "geo",
    "Wind": "Anemo",
    "Water": "Hydro",
    "Electric": "Electro",
    "Fire": "Pyro",
    "Ice": "Cryo",
    "Grass": "Dendro",
    "Unknown": "Unknown"
}

@run_sync
def wish_img_crop(img: Image.Image):
    w, h = img.size
    if w > h:
        img = img.crop(((w - h) // 2, 0, (w + h) // 2, h))
    elif w < h:
        img = img.crop((0, (h - w) // 2, w, (h + w) // 2))
    img = img.resize((1000, 1000))
    for x in range(img.size[0]):
        for y in range(img.size[1]):
            if x in range(0, 300) or x in range(700, 1000):
                p = list(img.getpixel((x, y)))
                pn = []
                k = clamp((1 - (abs(500 - x) - 200) / 330), 0, 1)
                for rgb in p[0:3]:
                    pn.append(int(rgb * k))
                pn.append(int(p[-1] * k))
                img.putpixel((x, y), tuple(pn))
            if y in range(0, 150) or y in range(850, 1000):
                p = list(img.getpixel((x, y)))
                pn = []
                k = clamp((1 - (abs(500 - y) - 350) / 160), 0, 1)
                for rgb in p[0:3]:
                    pn.append(int(rgb * k))
                pn.append(int(p[-1] * k))
                img.putpixel((x, y), tuple(pn))

    return img


def args_start_or_end_with(text: str) -> Rule:
    async def _rule(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent], state: T_State):
        args, kws = Command.formatToCommand(event.raw_message)
        args_text = Command.formatToString(*args)
        if text in args_text:
            if args_text.endswith(text):
                return True
            else:
                return False
        else:
            return False

    return Rule(_rule)


def get_lang_word(key: str, lang: str = "zh-CN", loc=None):
    if loc is None:
        loc = {}
    return loc.get(lang, loc["zh-CN"]).get(key, "None")


liteyuki_sign = "Generated by Liteyuki-Bot   Powered by Enka.Network"
user_card = on_command(cmd="原神状态", aliases={"原神数据"}, block=True)
set_uid = on_command(cmd="绑定uid", aliases={"#绑定uid"}, block=True)
hid_uid = on_command(cmd="遮挡uid", block=True)
update_resource = on_command(cmd="原神资源更新", block=True, permission=SUPERUSER)
character_bar = on_message(block=True, rule=args_start_or_end_with("面板"))
add_aliases = on_command(cmd="添加别称", block=True, permission=SUPERUSER)


async def resource_detect(texture: str):
    # 检测enka图片资源是否存在于本地，不存在就下载，无需带png
    if not os.path.exists(os.path.join(Path.cache, "genshin", "%s.png" % texture)):
        await run_sync(download_file)(url="https://enka.network/ui/%s.png" % texture,
                                      file=os.path.join(Path.cache, "genshin", "%s.png" % texture))
    else:
        pass


@user_card.handle()
async def _(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent], args: Message = CommandArg()):
    file_pool = {}
    for f in resource_pool.keys():
        if os.path.exists(os.path.join(Path.data, "genshin", f)):
            file_pool[f] = json.load(open(os.path.join(Path.data, "genshin", f), encoding="utf-8"))
        else:
            await user_card.finish("数据缺失，请先发送“原神资源更新”以更新基础资源库")

    args, kwargs = Command.formatToCommand(str(args).strip())
    lang = kwargs.get("lang", Data(Data.users, event.user_id).get_data(key="genshin.lang", default="zh-CN"))
    uid = 0
    if args[0] == "" and Data(Data.users, event.user_id).get_data(key="genshin.uid", default=None) is None:
        await user_card.finish("命令参数中未包含uid且未绑定过uid", at_sender=True)
    if len(args) >= 1 and args[0] != "":
        if not args[0].isdigit():
            await user_card.finish("命令参数uid格式有误", at_sender=True)
        else:
            uid = int(args[0])
    else:
        uid = Data(Data.users, event.user_id).get_data(key="genshin.uid", default=None)

    async with aiohttp.request("GET", url="https://enka.network/u/%s/__data.json" % uid) as resp:
        player_data = await resp.json()
        servers = {
            "1": "天空岛",
            "2": "天空岛",
            "5": "世界树",
            "6": "America",
            "7": "Europe",
            "8": "Asia",
            "9": "TW,HK,MO"
        }
        info_lang = {
            "zh-CN": {
                "finishAchievementNum": "成就数",
                "tower": "深境螺旋"
            },
            "zh-TW": {
                "finishAchievementNum": "成就数",
                "tower": "深境螺旋"
            },
            "en": {
                "finishAchievementNum": "Achievements",
                "tower": "Spiral Abyss"
            },
        }
        if "playerInfo" not in player_data:
            await user_card.finish("uid信息不存在", at_sender=True)
        else:
            playerInfo = player_data["playerInfo"]
            card = Cardimage(baseImg=Image.open(os.path.join(Path.res, "textures", "genshin", "stats_bg.png")))
            icon_avatar_id = player_data["playerInfo"]["profilePicture"]["avatarId"]

            iconName = file_pool["characters.json"].get(str(icon_avatar_id), {"iconName": "unknown.png"})["iconName"]
            if not os.path.exists(os.path.join(Path.cache, "genshin", "ui", "%s.png" % iconName)):
                await run_sync(download_file)(url="https://enka.network/ui/%s.png" % iconName,
                                              file=os.path.join(Path.cache, "genshin", "ui", "%s.png" % iconName))
            else:
                pass
            hywh_font = os.path.join(Path.res, "fonts", "hywh.ttf")
            # 头像
            card.addImage(uvSize=(1, 1), boxSize=(0.15, 0.15), xyOffset=(0, 0), basePoint=(0.04, 0.04), selfPoint=(0, 0),
                                img=Image.open(os.path.join(Path.cache, "genshin", "ui", "%s.png" % iconName)))
            # 昵称 双等级 签名
            nickname_pos = card.addText(uvSize=(1, 1), boxSize=(0.8, 0.05), xyOffset=(0, 0), basePoint=(0.2, 0.04), selfPoint=(0, 0),
                                              text=playerInfo["nickname"],
                                              font=hywh_font, color=(0, 0, 0, 255))
            # uid
            if Data(Data.users, event.user_id).get_data(key="genshin.hid_uid", default=False):
                text_uid = str(uid)[0:3] + "*" * 6
            else:
                text_uid = str(uid)
            card.addText(uvSize=(1, 1), boxSize=(0.8, 0.03), xyOffset=(0, 0), basePoint=(0.95, 0.16), selfPoint=(1, 0),
                               text="UID:%s" % text_uid,
                               font=hywh_font, color=(60, 60, 60, 255))
            # 双等级
            card.addText(uvSize=(1, 1), boxSize=(0.8, 0.035), xyOffset=(0, 0), basePoint=(0.2, 0.11), selfPoint=(0, 0),
                               text="%s    AR %s    WL %s" % (servers.get(str(uid)[0], "Unknown Server"), playerInfo["level"], playerInfo.get("worldLevel", 0)),
                               font=hywh_font, color=(80, 80, 80, 255))
            # 签名
            card.addText(uvSize=(1, 1), boxSize=(0.8, 0.035), xyOffset=(0, 0), basePoint=(0.2, 0.16), selfPoint=(0, 0),
                               text=playerInfo.get("signature", ""),
                               font=hywh_font, color=(80, 80, 80, 255))

            # 成就
            card.addText(uvSize=(1, 1), boxSize=(0.4, 0.05), xyOffset=(0, 0), basePoint=(0.15, 0.27), selfPoint=(0, 0),
                               text="%s：%s" % (info_lang.get(lang, info_lang["en"])["finishAchievementNum"], playerInfo.get("finishAchievementNum", 0)),
                               font=hywh_font, color=(80, 80, 80, 255))
            # 深渊
            card.addText(uvSize=(1, 1), boxSize=(0.4, 0.05), xyOffset=(0, 0), basePoint=(0.85, 0.27), selfPoint=(1, 0),
                               text="%s：%s-%s" % (info_lang.get(lang, info_lang["en"])["tower"], playerInfo.get("towerFloorIndex", 0), playerInfo.get("towerLevelIndex", 0)),
                               font=hywh_font, color=(80, 80, 80, 255))

            # 轻雪标记
            card.addText(uvSize=(1, 1), boxSize=(0.8, 0.04), xyOffset=(0, 0), basePoint=(0.5, 0.96), selfPoint=(0.5, 0.5),
                               text=liteyuki_sign,
                               font=hywh_font, color=(120, 120, 120, 255))
            # 展示角色

            if "showAvatarInfoList" not in playerInfo or len(playerInfo["showAvatarInfoList"]) == 0:
                card.addText(uvSize=(4, 5), boxSize=(3, 1), xyOffset=(0, 0), basePoint=(0.5, 0.6), selfPoint=(0.5, 0.5),
                                   text="请在游戏中至少展示一名角色", font=hywh_font, color=(120, 120, 120, 255))
            else:
                for i, character in enumerate(playerInfo["showAvatarInfoList"]):
                    # 公认数据
                    character_info = file_pool["characters_enka.json"].get(str(character["avatarId"]), {
                        "nameTextMapHash": 0,
                        "iconName": "Unknown",
                        "sideIconName": "Unknown",
                        "qualityType": "Unknown",
                        "costElemType": "Unknown"})
                    character_card = Cardimage(Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % character_info["QualityType"])))
                    element = elements[character_info["Element"]]
                    character_icon = character_info["SideIconName"].replace("_Side", "")
                    if not os.path.exists(os.path.join(Path.data, "genshin", "ui", "%s.png" % character_icon)):
                        await run_sync(download_file)(url="https://enka.network/ui/%s.png" % character_icon,
                                                      file=os.path.join(Path.data, "genshin", "ui", "%s.png" % character_icon))
                    character_card.addImage(uvSize=(4, 5), boxSize=(3.6, 3.6), xyOffset=(0, 0), basePoint=(0.5, 0.4), selfPoint=(0.5, 0.5),
                                                  img=Image.open(os.path.join(Path.data, "genshin", "ui", "%s.png" % character_icon)))
                    if character["avatarId"] not in [10000005, 10000007]:
                        character_card.addImage(uvSize=(4, 5), boxSize=(0.8, 0.8), xyOffset=(0, 0), basePoint=(0.11, 0.9), selfPoint=(0.5, 0.5),
                                                      img=Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % element)))
                    character_card.addText(uvSize=(4, 5), boxSize=(4, 0.65), xyOffset=(0, 0), basePoint=(0.5, 0.9), selfPoint=(0.5, 0.5),
                                                 text="Lv.%s" % character["level"], font=hywh_font, color=(0, 0, 0, 255))
                    x = i % 4 * 0.24 + 0.14
                    y = 0.5 + i // 4 * 0.3
                    card.addImage(uvSize=(1, 1), boxSize=(0.25, 0.25), xyOffset=(0, 0), basePoint=(x, y), selfPoint=(0.5, 0.5),
                                        img=character_card.baseImg)

            await user_card.send(MessageSegment.image(file="file:///%s" % await card.getPath()))


@set_uid.handle()
async def _(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent], args: Message = CommandArg()):
    args, kwargs = Command.formatToCommand(str(args).strip())
    if not args[0].isdigit():
        await set_uid.finish("uid格式错误", at_sender=True)
    else:
        uid = int(args[0])
        async with aiohttp.request("GET", url="https://enka.network/u/%s/__data.json" % uid) as resp:
            player_data = await resp.json()

            servers = {
                "1": "天空岛",
                "2": "天空岛",
                "5": "世界树",
                "6": "America",
                "7": "Europe",
                "8": "Asia",
                "9": "TW,HK,Mo"
            }
            if len(player_data) == 0:
                await set_uid.finish("uid信息不存在", at_sender=True)
            else:
                playerInfo = player_data["playerInfo"]
                lang = kwargs.get("lang", "zh-CN")

                Data(Data.users, event.user_id).set_data(key="genshin.uid", value=uid)
                Data(Data.users, event.user_id).set_data(key="genshin.lang", value=lang)
                await set_uid.finish("绑定成功：%s（%s  Lv.%s）" % (playerInfo["nickname"], servers.get(str(uid)[0], "Unknown Server"), playerInfo["level"]))


@hid_uid.handle()
async def _(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent]):
    raw_stats = Data(Data.users, event.user_id).get_data(key="genshin.hid_uid", default=False)
    Data(Data.users, event.user_id).set_data(key="genshin.hid_uid", value=not raw_stats)
    await hid_uid.finish("已%suid遮挡" % ("关闭" if raw_stats else "开启"), at_sender=True)


@update_resource.handle()
async def _(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent]):
    if not os.path.exists(os.path.join(Path.data, "genshin")):
        os.makedirs(os.path.join(Path.data, "genshin"))
    for file, url in resource_pool.items():
        await update_resource.send("正在更新：%s" % file)
        await run_sync(download_file)(url, os.path.join(Path.data, "genshin", file))
    await update_resource.finish("资源更新完成", at_sender=True)


@character_bar.handle()
async def _(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent]):
    file_pool = {}
    for f in resource_pool.keys():
        if os.path.exists(os.path.join(Path.data, "genshin", f)):
            file_pool[f] = json.load(open(os.path.join(Path.data, "genshin", f), encoding="utf-8"))
        else:
            await user_card.finish("数据缺失，请先发送“原神资源更新”以更新基础资源库")

    args, kwargs = Command.formatToCommand(event.raw_message)
    character_name_input = args[0].strip().replace("面板", "")
    _break = False
    lang = "zh-CN"
    hash_id = str()
    entry = str()

    if character_name_input in ["荧", "空"]:
        character_name_input = "旅行者"

    for lang, lang_data in file_pool["loc.json"].items():
        for hash_id, entry in lang_data.items():
            if character_name_input == entry:
                _break = True
                break
        if _break:
            break
    else:
        for hash_id, aliases_list in Data(Data.globals, "genshin_game_data").get_data(key="character_aliases", default={}):
            if character_name_input in aliases_list:
                break
        else:
            await character_bar.finish("资源中角色名不存在或资源未更新", at_sender=True)

    lang = kwargs.get("lang", Data(Data.users, event.user_id).get_data(key="genshin.lang", default=lang))
    character_hash_id = hash_id

    character_id = 0
    character = {}
    for character_id, character in file_pool["characters_enka.json"].items():
        if int(hash_id) == character["NameTextMapHash"]:
            character_id = character_id
            break
    else:
        await character_bar.finish("characters.json中角色名不存在或资源未更新", at_sender=True)

    # uid判定
    uid = kwargs.get("uid", Data(Data.users, event.user_id).get_data(key="genshin.uid", default=None))
    if uid is None:
        await character_bar.finish("命令参数中未包含uid且未绑定过uid", at_sender=True)
    else:
        uid = int(uid)
    async with aiohttp.request("GET", url="https://enka.network/u/%s/__data.json" % uid) as resp:
        player_data = await resp.json()

        # uid真实性判定
        if "playerInfo" not in player_data:
            await character_bar.finish("uid信息不存在", at_sender=True)

        # 角色展示判定i
        if "avatarInfoList" not in player_data:
            await character_bar.finish(
                MessageSegment.text("请在游戏中显示角色详情") + MessageSegment.image(file="file:///%s" % os.path.join(Path.res, "textures", "genshin", "open_details.png")),
                at_sender=True)
        # 判断旅行者
        is_traveler = False
        if character_id in ["10000005", "10000007"]:
            is_traveler = True

        for user_character in player_data["avatarInfoList"]:
            if user_character["avatarId"] == int(character_id) or user_character["avatarId"] in [10000005, 10000007] and is_traveler:
                if is_traveler:
                    await character_bar.finish("暂不支持查询旅行者面板")
                break
        else:
            await character_bar.finish("你的展板中没有此角色", at_sender=True)

        # 角色资源数据
        enka_character_data = character
        # 玩家角色数据，来自enka
        player_character_data = user_character
        # 面板基础信息获取
        # 生命值上限 攻击力 防御力 元素精通 暴击 暴伤 充能 元素伤 [物伤(与元素伤谁大) 治疗加成（大于0）]
        # 英语元素转希腊语元素
        greece_element = elements.get(enka_character_data["Element"], "Unknown")
        # 根据元素属性选择底图

        hywh_font = os.path.join(Path.res, "fonts", "hywh.ttf")
        msg_id = (await character_bar.send("面板正在生成，请稍等几秒...", at_sender=True))["message_id"]
        bar_bg = Cardimage(Image.open(os.path.join(Path.res, "textures", "genshin", "%s_bg.png" % greece_element)))
        bar_bg.baseImg = bar_bg.baseImg.resize((1960, 1000))
        # 角色大图部分，包含命座，天赋，名称，等级，好感度
        # 角色武器,圣遗物
        weapon = {}
        artifacts = []
        for equipment in player_character_data["equipList"]:
            equipment: dict
            if "weapon" in equipment:
                weapon = equipment
            elif "reliquary" in equipment:
                artifacts.append(equipment)
        artifact_set_dict = {}
        sacrificer = [
            "212557731",
            "262428003",
            "287454963",
            "2060049099",
            "3999792907"
        ]
        for artifact in artifacts:
            if artifact["flat"]["setNameTextMapHash"] in artifact_set_dict:
                artifact_set_dict[artifact["flat"]["setNameTextMapHash"]] += 1
            else:
                artifact_set_dict[artifact["flat"]["setNameTextMapHash"]] = 1

        # 角色基础属性 int1基础值和附加值 int2只有最终值 percent百分比 | accuracy小数位默认0
        fight_prop = player_character_data["fightPropMap"]
        prop_dict = {
            "FIGHT_PROP_MAX_HP": {
                "type": "int1",
                "base": fight_prop["1"],
                "add": fight_prop["2000"] - fight_prop["1"],
                "value": fight_prop["2000"]
            },
            "FIGHT_PROP_ATTACK": {
                "type": "int1",
                "base": fight_prop["4"],
                "add": fight_prop["2001"] - fight_prop["4"],
                "value": fight_prop["2001"]
            },
            "FIGHT_PROP_DEFENSE": {
                "type": "int1",
                "base": fight_prop["7"],
                "add": fight_prop["2002"] - fight_prop["7"],
                "value": fight_prop["2002"]
            },
            "FIGHT_PROP_ELEMENT_MASTERY": {
                "type": "int2",
                "value": fight_prop["28"]
            },
            "FIGHT_PROP_CRITICAL": {
                "type": "percent",
                "accuracy": 1,
                "value": fight_prop["20"]
            },
            "FIGHT_PROP_CRITICAL_HURT": {
                "type": "percent",
                "accuracy": 1,
                "value": fight_prop["22"]
            },
            "FIGHT_PROP_CHARGE_EFFICIENCY": {
                "type": "percent",
                "accuracy": 1,
                "value": fight_prop["23"]
            },
        }
        addition_props = {
            30: "FIGHT_PROP_PHYSICAL_ADD_HURT",
            40: "FIGHT_PROP_FIRE_ADD_HURT",
            41: "FIGHT_PROP_ELEC_ADD_HURT",
            42: "FIGHT_PROP_WATER_ADD_HURT",
            43: "FIGHT_PROP_GRASS_ADD_HURT",
            44: "FIGHT_PROP_WIND_ADD_HURT",
            45: "FIGHT_PROP_ROCK_ADD_HURT",
            46: "FIGHT_PROP_ICE_ADD_HURT",
            26: "FIGHT_PROP_HEAL_ADD",
        }
        times = 0
        for fight_prop_id, fight_prop_name in addition_props.items():

            if fight_prop[str(fight_prop_id)] > 0:
                times += 1
                prop_dict[fight_prop_name] = {
                    "type": "percent",
                    "accuracy": 1,
                    "value": fight_prop[str(fight_prop_id)]
                }
            if times >= 2:
                break

        line = 0
        prop_line_distance = 0.013
        line_high = 0.05
        start_line_x = 0.346938
        end_line_x = 0.65306
        start_line_y = 0.4
        try:
            # 名称 等级 好感度
            rank_level = {
                0: 20,
                1: 40,
                2: 50,
                3: 60,
                4: 70,
                5: 80,
                6: 90
            }
            # 立绘
            chinese_name = file_pool["loc.json"]["zh-CN"].get(character_hash_id)
            if os.path.exists(os.path.join(Path.res, "textures", "genshin", "%s.png" % chinese_name)):
                character_wish_img = Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % chinese_name))
                character_wish_img = await wish_img_crop(character_wish_img)
            else:
                character_wish_img = Image.new("RGBA", (300, 300), color=(255, 255, 255, 255))
            await resource_detect(enka_character_data["SideIconName"].split("_")[-1])
            bar_bg.addImage(uvSize=(1, 1), boxSize=(2, 0.9), xyOffset=(0, 0), basePoint=(0.18, 0.6),
                                  selfPoint=(0.5, 0.5),
                                  img=character_wish_img)
            name_pos = bar_bg.addText(uvSize=(1, 1), boxSize=(0.22, 0.06), xyOffset=(0, 0), basePoint=(0.03061, 0.06),
                                            selfPoint=(0, 0), text=get_lang_word(str(character_hash_id), lang, file_pool["loc.json"]), font=hywh_font)
            if character_name_input != entry:
                bar_bg.addText(uvSize=(1, 1), boxSize=(0.12, 0.04), xyOffset=(0, 0), basePoint=(name_pos[2] + 0.005, name_pos[3]),
                                     selfPoint=(0, 1), text="(%s)" % character_name_input, font=hywh_font, color=(180, 180, 180, 255), force_size=True)

            level_pos = bar_bg.addText(uvSize=(1, 1), boxSize=(0.3, 0.05), xyOffset=(0, 0), basePoint=(0.03061, 0.17),
                                             selfPoint=(0, 0),
                                             text="%s %s/" % (
                                                 get_lang_word("level", lang, file_pool["loc.json"]), player_character_data["propMap"]["4001"]["val"]),
                                             font=hywh_font)
            bar_bg.addText(uvSize=(1, 1), boxSize=(0.3, 0.05), xyOffset=(0, 0), basePoint=(level_pos[2], 0.17),
                                 selfPoint=(0, 0),
                                 text="%s" % rank_level[int(player_character_data["propMap"]["1002"].get("val", 0))],
                                 font=hywh_font, color=(180, 180, 180, 255))
            # 好感度
            love_icon_pos = bar_bg.addImage(uvSize=(1, 1), boxSize=(0.3, 0.05), xyOffset=(0, 0), basePoint=(0.0306, 0.24),
                                                  selfPoint=(0, 0), img=Image.open(os.path.join(Path.res, "textures", "genshin", "love.png")))

            bar_bg.addText(uvSize=(1, 1), boxSize=(0.3, 0.04), xyOffset=(0, 0), basePoint=(love_icon_pos[2] + 0.01, (love_icon_pos[1] + love_icon_pos[3]) / 2),
                                 selfPoint=(0, 0.6),
                                 text="%s" % player_character_data["fetterInfo"]["expLevel"],
                                 font=hywh_font)
            # 元素图
            bar_bg.addImage(uvSize=(1, 1), boxSize=(0.3, 0.08), xyOffset=(0, 0), basePoint=(0.2653, 0.06),
                                  selfPoint=(0, 0), img=Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % greece_element)))

            # 命之座
            constellation_distance = 0.1
            x0 = 0.045
            y0 = 0.38
            base_size = 0.12
            texture_size = 0.064
            constellation_num = len(player_character_data.get("talentIdList", []))
            for i, constellation_texture_name in enumerate(enka_character_data["Consts"]):
                await resource_detect(constellation_texture_name)
                if i + 1 <= constellation_num:
                    # 已解锁命之座,先放底图，再放材质图
                    bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, base_size), xyOffset=(0, 0), basePoint=(x0, y0 + i * constellation_distance),
                                          selfPoint=(0.5, 0.5),
                                          img=Image.open(os.path.join(Path.res, "textures", "genshin", "constellation_%s_unlocked.png" % greece_element)))
                    bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, texture_size), xyOffset=(0, 0), basePoint=(x0, y0 + i * constellation_distance),
                                          selfPoint=(0.5, 0.5),
                                          img=Image.open(os.path.join(Path.cache, "genshin", "%s.png" % constellation_texture_name)))
                else:
                    # 先放材质图，再放底图遮盖，最后加锁
                    texture_img = ImageEnhance.Brightness(
                        Image.open(os.path.join(Path.cache, "genshin", "%s.png" % constellation_texture_name)).convert("RGBA")).enhance(0.5)
                    base_img = ImageEnhance.Brightness(
                        Image.open(os.path.join(Path.res, "textures", "genshin", "constellation_%s_locked.png" % greece_element)).convert("RGBA")).enhance(
                        0.75)
                    bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, base_size), xyOffset=(0, 0), basePoint=(x0, y0 + i * constellation_distance),
                                          selfPoint=(0.5, 0.5),
                                          img=base_img)
                    bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, texture_size), xyOffset=(0, 0), basePoint=(x0, y0 + i * constellation_distance),
                                          selfPoint=(0.5, 0.5),
                                          img=texture_img)
                    bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, 0.032), xyOffset=(0, 0), basePoint=(x0, y0 + i * constellation_distance),
                                          selfPoint=(0.5, 0.5),
                                          img=Image.open(os.path.join(Path.res, "textures", "genshin", "locked.png")))
            # 天赋
            x0 = 0.2959
            y0 = 0.58
            skill_distance = 0.14
            for skill_i, skill_data in enumerate(enka_character_data["Skills"].items()):
                skill_id = skill_data[0]
                skill_texture = skill_data[1]
                await resource_detect(skill_texture)
                skill_level = player_character_data["skillLevelMap"][skill_id]
                add = False
                if skill_i == 1 and constellation_num >= 3:
                    skill_level += 3
                    add = True
                if skill_i == 2 and constellation_num >= 5:
                    skill_level += 3
                    add = True
                talent_base_pos = bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, 0.12), xyOffset=(0, 0), basePoint=(x0, y0 + skill_i * skill_distance),
                                                        selfPoint=(0.5, 0.5),
                                                        img=Image.open(os.path.join(Path.res, "textures", "genshin", "talent.png")))
                bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, 0.08), xyOffset=(0, 0), basePoint=(x0, y0 + skill_i * skill_distance),
                                      selfPoint=(0.5, 0.5),
                                      img=Image.open(os.path.join(Path.cache, "genshin", "%s.png" % skill_texture)))
                bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1, 0.03), xyOffset=(0, 0), basePoint=((talent_base_pos[0] + talent_base_pos[2]) / 2, talent_base_pos[3]),
                                      selfPoint=(0.5, 1),
                                      img=Image.open(os.path.join(Path.res, "textures", "genshin", "talent_level_base_%s.png" % ("add" if add else "normal"))))
                if add and skill_level == 13 or not add and skill_level == 10:
                    color = Cardimage.hex2dec("FFFFEE00")
                else:
                    color = (255, 255, 255, 255)
                bar_bg.addText(uvSize=(1, 1), boxSize=(0.1, 0.025), xyOffset=(0, 0), basePoint=((talent_base_pos[0] + talent_base_pos[2]) / 2, talent_base_pos[3] - 0.005),
                                     selfPoint=(0.5, 1), text=str(skill_level), font=hywh_font, color=color)

            # ---------------------------------------------- #
            # ---------------------------------------------- #
            # 武器图
            await resource_detect(weapon["flat"]["icon"])
            # 贴图
            weapon_pos = bar_bg.addImage(uvSize=(1, 1), boxSize=(0.18, 0.25), xyOffset=(0, 0), basePoint=(start_line_x, 0.05),
                                               selfPoint=(0, 0), img=Image.open(os.path.join(Path.cache, "genshin", "%s.png" % weapon["flat"]["icon"])))
            # 武器名
            bar_bg.addText(uvSize=(1, 1), boxSize=(0.18, 0.05), xyOffset=(0, 0), basePoint=(weapon_pos[2] + 0.019, weapon_pos[1] + 0.03),
                                 selfPoint=(0, 0), text=get_lang_word(weapon["flat"]["nameTextMapHash"], lang, loc=file_pool["loc.json"]), font=hywh_font)
            star = weapon["flat"]["rankLevel"]
            # 星级
            bar_bg.drawLine(uvSize=(1, 1), p1=(weapon_pos[0], weapon_pos[3]), p2=(weapon_pos[2], weapon_pos[3]), color=(255, 255, 255, 255), width=5)
            bar_bg.addImage(uvSize=(1, 1), boxSize=(0.25, 0.04), xyOffset=(0, 0), basePoint=((weapon_pos[0] + weapon_pos[2]) / 2, weapon_pos[3]),
                                  selfPoint=(0.5, 1), img=Image.open(os.path.join(Path.res, "textures", "genshin", "star_%s.png" % star)))
            weapon_info_bg = Cardimage(Image.open(os.path.join(Path.res, "textures", "genshin", "weapon_info.png")))
            stats_distance = 0.43
            x0 = 0.1
            y0 = 0.25
            y1 = 0.75
            percent_prop = [
                "FIGHT_PROP_PHYSICAL_ADD_HURT",
                "FIGHT_PROP_CHARGE_EFFICIENCY",
                "FIGHT_PROP_HEAL_ADD",
                "FIGHT_PROP_ATTACK_PERCENT",
                "FIGHT_PROP_HP_PERCENT",
                "FIGHT_PROP_DEFENSE_PERCENT",
                "FIGHT_PROP_CRITICAL",
                "FIGHT_PROP_CRITICAL_HURT",
                "FIGHT_PROP_FIRE_ADD_HURT",
                "FIGHT_PROP_WATER_ADD_HURT",
                "FIGHT_PROP_WIND_ADD_HURT",
                "FIGHT_PROP_ICE_ADD_HURT",
                "FIGHT_PROP_ROCK_ADD_HURT",
                "FIGHT_PROP_ELEC_ADD_HURT",
                "FIGHT_PROP_GRASS_ADD_HURT"
            ]

            for i, stats in enumerate(weapon["flat"]["weaponStats"]):
                icon_pos = weapon_info_bg.addImage(uvSize=(1, 1), boxSize=(0.22, 0.22), xyOffset=(0, 0), basePoint=(x0 + i * stats_distance, y0),
                                                         selfPoint=(0.5, 0.5),
                                                         img=Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % stats["appendPropId"])))
                if stats["appendPropId"] in percent_prop:
                    value = str(stats["statValue"]) + "%"
                else:
                    value = str(stats["statValue"])
                weapon_info_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.23), xyOffset=(0, 0), basePoint=(icon_pos[2] + 0.03, y0),
                                             selfPoint=(0, 0.5), text=value, font=hywh_font, force_size=True)

            level_pos = weapon_info_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.23), xyOffset=(0, 0), basePoint=(x0 - 0.05, y1),
                                                     selfPoint=(0, 0.5),
                                                     text="%s %s/" % (
                                                         get_lang_word("level", lang, file_pool["loc.json"]), weapon["weapon"]["level"],
                                                     ),
                                                     font=hywh_font, force_size=True)
            level_max_pos = weapon_info_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.23), xyOffset=(0, 0), basePoint=(level_pos[2], y1),
                                                         selfPoint=(0, 0.5),
                                                         text="%s" % rank_level[weapon["weapon"].get("promoteLevel", 0)],
                                                         font=hywh_font, force_size=True, color=(180, 180, 180, 255))
            r = 0
            if "affixMap" in weapon["weapon"]:
                for v in weapon["weapon"]["affixMap"].values():
                    r = v
            else:
                r = 0
            # 精炼等级
            weapon_info_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.23), xyOffset=(0, 0), basePoint=(0.8, y1),
                                         selfPoint=(0, 0.5),
                                         text="R%s" % (r + 1),
                                         font=hywh_font, force_size=True, color=Cardimage.hex2dec("FFFFEE00" if r == 4 else "FFFFFFFF"))
            bar_bg.addImage(uvSize=(1, 1), boxSize=(0.1531, 0.155), xyOffset=(0, 0), basePoint=(0.4898, 0.155),
                                  selfPoint=(0, 0), img=weapon_info_bg.baseImg)

            # ---------------------------------------------- #
            # ---------------------------------------------- #
            # 属性词条图
            for prop_name, prop_data in prop_dict.items():
                bar_bg.addImage(uvSize=(1, 1), boxSize=(0.3, line_high * 0.7), xyOffset=(0, 0),
                                      basePoint=(start_line_x, start_line_y + line * (prop_line_distance + line_high)),
                                      selfPoint=(0, 0.5), img=Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % prop_name)))
                bar_bg.addText(uvSize=(1, 1), boxSize=(0.6, line_high * 0.6), xyOffset=(0, 0),
                                     basePoint=(start_line_x + line_high * 0.55, start_line_y + line * (prop_line_distance + line_high)),
                                     selfPoint=(0, 0.5), text=file_pool["loc.json"].get(lang, file_pool["loc.json"]["zh-CN"]).get(prop_name, prop_name), font=hywh_font,
                                     force_size=True)
                if prop_data["type"] == "int1":
                    value_pos = bar_bg.addText(uvSize=(1, 1), boxSize=(0.4, line_high * 0.6), xyOffset=(0, 0),
                                                     basePoint=(end_line_x, start_line_y + line * (prop_line_distance + line_high)),
                                                     selfPoint=(1, 0.6), text=str(round(prop_data["value"])), font=hywh_font, force_size=True)
                    add_pos = bar_bg.addText(uvSize=(1, 1), boxSize=(0.4, line_high * 0.4), xyOffset=(0, 0),
                                                   basePoint=(value_pos[2], value_pos[3]),
                                                   selfPoint=(1, 0), text=" +" + str(round(prop_data["add"])), font=hywh_font, force_size=True,
                                                   color=Cardimage.hex2dec("FF05C05F"))
                    bar_bg.addText(uvSize=(1, 1), boxSize=(0.4, line_high * 0.4), xyOffset=(0, 0),
                                         basePoint=(add_pos[0], add_pos[1]),
                                         selfPoint=(1, 0), text=str(round(prop_data["base"])), font=hywh_font, force_size=True)
                elif prop_data["type"] == "int2":
                    bar_bg.addText(uvSize=(1, 1), boxSize=(0.4, line_high * 0.6), xyOffset=(0, 0),
                                         basePoint=(end_line_x, start_line_y + line * (prop_line_distance + line_high)),
                                         selfPoint=(1, 0.5), text=str(round(prop_data["value"])), font=hywh_font, force_size=True)
                elif prop_data["type"] == "percent":
                    bar_bg.addText(uvSize=(1, 1), boxSize=(0.4, line_high * 0.6), xyOffset=(0, 0),
                                         basePoint=(end_line_x, start_line_y + line * (prop_line_distance + line_high)),
                                         selfPoint=(1, 0.5), text=str(round(prop_data["value"] * 100, prop_data.get("accuracy", 0))) + "%", font=hywh_font, force_size=True)
                else:
                    pass

                line += 1

            # 圣遗物部分
            x0 = 0.7
            y0 = 0.06
            artifact_distance = 0.15
            artifact_pos = [x0, y0, 0, 0]
            for artifact_i, artifact in enumerate(artifacts):
                await resource_detect(artifact["flat"]["icon"])

                artifact_bg = Cardimage(Image.open(os.path.join(Path.res, "textures", "genshin", "artifact_bg.png")))
                # 圣遗物贴图
                artifact_texture_pos = artifact_bg.addImage(uvSize=(1, 1), boxSize=(0.5, 1), xyOffset=(0, 0),
                                                                  basePoint=(0, 0),
                                                                  selfPoint=(0, 0),
                                                                  img=Image.open(os.path.join(Path.cache, "genshin", "%s.png" % artifact["flat"]["icon"])))
                artifact_bg.addImage(uvSize=(1, 1), boxSize=(0.5, 0.2), xyOffset=(0, 0),
                                           basePoint=((artifact_texture_pos[0] + artifact_texture_pos[2]) / 2, artifact_texture_pos[3] - 0.09),
                                           selfPoint=(0.5, 1),
                                           img=Image.open(os.path.join(Path.res, "textures", "genshin", "star_%s.png" % artifact["flat"]["rankLevel"])))
                main_attr = artifact["flat"]["reliquaryMainstat"]["mainPropId"]
                main_attr_value = artifact["flat"]["reliquaryMainstat"]["statValue"]
                if main_attr in percent_prop:
                    value = str(main_attr_value) + "%"
                else:
                    value = str(main_attr_value)

                artifact_bg.addImage(uvSize=(1, 1), boxSize=(0.5, 0.25), xyOffset=(0, 0),
                                           basePoint=(0.25, 0.185), selfPoint=(0, 0),
                                           img=Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % main_attr)))
                artifact_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.2), xyOffset=(0, 0),
                                          basePoint=(0.25, 0.65), selfPoint=(0, 0), text=value, font=hywh_font, force_size=True)
                artifact_bg.drawLine(uvSize=(1, 1), p1=(0.465, 0.12), p2=(0.465, 0.88), color=(80, 80, 80, 255), width=3)
                artifact_bg.drawLine(uvSize=(1, 1), p1=(0.48, 0.44), p2=(0.95, 0.44), color=(80, 80, 80, 255), width=3)
                artifact_bg.drawLine(uvSize=(1, 1), p1=(0.48, 0.9), p2=(0.95, 0.9), color=(80, 80, 80, 255), width=3)
                artifact_bg.drawLine(uvSize=(1, 1), p1=(0.45, 0.5), p2=(0.25, 0.5), color=(80, 80, 80, 255), width=3)
                artifact_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.18), xyOffset=(0, 0), basePoint=(0.33, 0.17),
                                          selfPoint=(0, 0), text="+" + str(artifact["reliquary"]["level"] - 1), font=hywh_font, force_size=True)
                x10 = 0.5
                y10 = 0.19
                dx = 0.25
                dy = 0.45
                for sub_i, sub_data in enumerate(artifact["flat"]["reliquarySubstats"]):
                    x = x10 + sub_i % 2 * dx
                    y = y10 + sub_i // 2 * dy
                    sub_attr = sub_data["appendPropId"]
                    sub_value = sub_data["statValue"]
                    if sub_attr in percent_prop:
                        value = str(sub_value) + "%"
                    else:
                        value = str(sub_value)
                    artifact_bg.addImage(uvSize=(1, 1), boxSize=(0.5, 0.2), xyOffset=(0, 0),
                                               basePoint=(x, y), selfPoint=(0, 0),
                                               img=Image.open(os.path.join(Path.res, "textures", "genshin", "%s.png" % sub_attr)))
                    artifact_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.2), xyOffset=(0, 0),
                                              basePoint=(x + 0.07, y), selfPoint=(0, 0), text=value, font=hywh_font, force_size=True)

                # 上大图
                artifact_pos = bar_bg.addImage(uvSize=(1, 1), boxSize=(0.30612, 0.14), xyOffset=(0, 0),
                                                     basePoint=(x0, y0 + artifact_i * artifact_distance),
                                                     selfPoint=(0, 0), img=artifact_bg.baseImg)
            artifact_set_words = []
            for sets in artifact_set_dict.items():
                sets = list(sets)
                if sets[0] in sacrificer:
                    sets[1] = 1
                    artifact_set_words.append(sets)
                elif sets[1] >= 4:
                    sets[1] = 4
                    artifact_set_words.append(sets)
                elif sets[1] >= 2:
                    sets[1] = 2
                    artifact_set_words.append(sets)
            dy = 0.05
            set_word = Cardimage(Image.open(os.path.join(Path.res, "textures", "genshin", "artifact_bg.png")))
            # 套装效果

            for w_i, word in enumerate(artifact_set_words):
                set_word.addText(uvSize=(1, 1), boxSize=(0.8, 0.2), xyOffset=(0, 0),
                                       basePoint=(0.3, w_i * 0.26 + 0.1), selfPoint=(0, 0),
                                       text=get_lang_word(word[0], lang, file_pool["loc.json"]) + ": " + str(word[1]),
                                       font=hywh_font, color=Cardimage.hex2dec("FF44ff00"))
            set_word.addImage(uvSize=(1, 1), boxSize=(0.8, 0.8), xyOffset=(0, 0),
                                    basePoint=(0.04, 0.5), selfPoint=(0, 0.5),
                                    img=Image.open(os.path.join(Path.res, "textures", "genshin", "flower.png")))
            bar_bg.addImage(uvSize=(1, 1), boxSize=(0.30612, 0.14), xyOffset=(0, 0),
                                  basePoint=(artifact_pos[0], artifact_pos[1] + artifact_distance), selfPoint=(0, 0),
                                  img=set_word.baseImg)

            # 签名 UID上图
            times = "%s-%s-%s %s:%s" % tuple(list(time.localtime())[0:5])
            bar_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.025), xyOffset=(0, 0),
                                 basePoint=(0.99, 0.99),
                                 selfPoint=(1, 1), text="%s    Language: %s    %s    UID： %s" % (times, lang, player_data["playerInfo"]["nickname"], uid), font=hywh_font,
                                 force_size=True)
            bar_bg.addText(uvSize=(1, 1), boxSize=(0.5, 0.025), xyOffset=(0, 0),
                                 basePoint=(0.01, 0.99),
                                 selfPoint=(0, 1), text=liteyuki_sign, font=hywh_font, force_size=True)
            bar_bg.convert("RGB")
            await character_bar.send(MessageSegment.image(file="file:///%s" % bar_bg.getPath()))
            print(bar_bg)
            await bot.delete_msg(message_id=msg_id)
        except BaseException as e:
            await bot.delete_msg(message_id=msg_id)
            await character_bar.finish("数据资源可能存在错误，请检查:%s" % traceback.format_exception(e), at_sender=True)


@add_aliases.handle()
async def _(bot: Bot, event: Union[GroupMessageEvent, PrivateMessageEvent], args: Message = CommandArg()):
    file_pool = {}
    for f in resource_pool.keys():
        if os.path.exists(os.path.join(Path.data, "genshin", f)):
            file_pool[f] = json.load(open(os.path.join(Path.data, "genshin", f), encoding="utf-8"))
        else:
            await user_card.finish("数据缺失，请先发送“原神资源更新”以更新基础资源库")
    args, kwargs = Command.formatToCommand(cmd=str(args))
    identify_name = args[0]
    if len(args) > 1:
        _break = False
        aliases = args[1:]
        hash_id = str()
        for lang, lang_data in file_pool["loc.json"].items():
            for hash_id, entry in lang_data.items():
                if identify_name == entry:
                    _break = True
                    break
            if _break:
                break
        else:
            await character_bar.finish("资源中角色名不存在或资源未更新", at_sender=True)
        character_hash_id = hash_id

        character_id = 0
        character = {}
        for character_id, character in file_pool["characters_enka.json"].items():
            if int(hash_id) == character["NameTextMapHash"]:
                character_id = character_id
                break
        else:
            await character_bar.finish("characters.json中角色名不存在或资源未更新", at_sender=True)

        data = Data(Data.globals, "genshin_game_data").get_data(key="character_aliases", default={})
        if hash_id in data:
            data[hash_id] += aliases
        else:
            data[hash_id] = aliases
        data[hash_id] = list(set(data[hash_id]))
        Data(Data.globals, "genshin_game_data").set_data(key="character_aliases", value=data)
        await add_aliases.finish("别称添加完成：%s(%s)：%s" % (identify_name, hash_id, aliases))

    else:
        await add_aliases.finish("请至少添加一个别称", at_sender=True)
