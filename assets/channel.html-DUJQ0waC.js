import{_ as e,o as n,c as a,e as c}from"./app-CkqL16TZ.js";const l={},t=c(`<h3 id="def-set-channel-name-str-channel-channel-none" tabindex="-1"><a class="header-anchor" href="#def-set-channel-name-str-channel-channel-none"><span><em><strong>def</strong></em> <code>set_channel(name: str, channel: Channel) -&gt; None</code></span></a></h3><p>设置通道实例</p><p>Args:</p><pre><code>name: 通道名称

channel: 通道实例
</code></pre><h3 id="def-set-channels-channels-dict-str-channel-none" tabindex="-1"><a class="header-anchor" href="#def-set-channels-channels-dict-str-channel-none"><span><em><strong>def</strong></em> <code>set_channels(channels: dict[str, Channel]) -&gt; None</code></span></a></h3><p>设置通道实例</p><p>Args:</p><pre><code>channels: 通道名称
</code></pre><h3 id="def-get-channel-name-str-channel" tabindex="-1"><a class="header-anchor" href="#def-get-channel-name-str-channel"><span><em><strong>def</strong></em> <code>get_channel(name: str) -&gt; Channel</code></span></a></h3><p>获取通道实例</p><p>Args:</p><pre><code>name: 通道名称
</code></pre><p>Returns:</p><h3 id="def-get-channels-dict-str-channel" tabindex="-1"><a class="header-anchor" href="#def-get-channels-dict-str-channel"><span><em><strong>def</strong></em> <code>get_channels() -&gt; dict[str, Channel]</code></span></a></h3><p>获取通道实例</p><p>Returns:</p><h3 id="def-on-set-channel-data-tuple-str-dict-str-any-none" tabindex="-1"><a class="header-anchor" href="#def-on-set-channel-data-tuple-str-dict-str-any-none"><span><em><strong>def</strong></em> <code>on_set_channel(data: tuple[str, dict[str, Any]]) -&gt; None</code></span></a></h3><h3 id="def-on-get-channel-data-tuple-str-dict-str-any-none" tabindex="-1"><a class="header-anchor" href="#def-on-get-channel-data-tuple-str-dict-str-any-none"><span><em><strong>def</strong></em> <code>on_get_channel(data: tuple[str, dict[str, Any]]) -&gt; None</code></span></a></h3><h3 id="def-on-get-channels-data-tuple-str-dict-str-any-none" tabindex="-1"><a class="header-anchor" href="#def-on-get-channels-data-tuple-str-dict-str-any-none"><span><em><strong>def</strong></em> <code>on_get_channels(data: tuple[str, dict[str, Any]]) -&gt; None</code></span></a></h3><h3 id="def-decorator-func-callable-t-any-callable-t-any" tabindex="-1"><a class="header-anchor" href="#def-decorator-func-callable-t-any-callable-t-any"><span><em><strong>def</strong></em> <code>decorator(func: Callable[[T], Any]) -&gt; Callable[[T], Any]</code></span></a></h3><h3 id="async-def-wrapper-data-t-any" tabindex="-1"><a class="header-anchor" href="#async-def-wrapper-data-t-any"><span><em><strong>async def</strong></em> <code>wrapper(data: T) -&gt; Any</code></span></a></h3><h3 id="class-channel-generic-t" tabindex="-1"><a class="header-anchor" href="#class-channel-generic-t"><span><em><strong>class</strong></em> <code>Channel(Generic[T])</code></span></a></h3><p>通道类，可以在进程间和进程内通信，双向但同时只能有一个发送者和一个接收者</p><p>有两种接收工作方式，但是只能选择一种，主动接收和被动接收，主动接收使用 <code>receive</code> 方法，被动接收使用 <code>on_receive</code> 装饰器</p><h3 id="def-init-self-id-str-type-check-optional-bool-none" tabindex="-1"><a class="header-anchor" href="#def-init-self-id-str-type-check-optional-bool-none"><span>  <em><strong>def</strong></em> <code>__init__(self, _id: str, type_check: Optional[bool]) -&gt; None</code></span></a></h3><p> 初始化通道</p><p>Args:</p><pre><code>_id: 通道ID

type_check: 是否开启类型检查, 若为空，则传入泛型默认开启，否则默认关闭
</code></pre><h3 id="def-send-self-data-t-none" tabindex="-1"><a class="header-anchor" href="#def-send-self-data-t-none"><span>  <em><strong>def</strong></em> <code>send(self, data: T) -&gt; None</code></span></a></h3><p> 发送数据</p><p>Args:</p><pre><code>data: 数据
</code></pre><h3 id="def-receive-self-t" tabindex="-1"><a class="header-anchor" href="#def-receive-self-t"><span>  <em><strong>def</strong></em> <code>receive(self) -&gt; T</code></span></a></h3><p> 接收数据</p><p>Args:</p><h3 id="def-close-self-none" tabindex="-1"><a class="header-anchor" href="#def-close-self-none"><span>  <em><strong>def</strong></em> <code>close(self) -&gt; None</code></span></a></h3><p> 关闭通道</p><h3 id="def-on-receive-self-filter-func-optional-filter-func-callable-callable-t-any-callable-t-any" tabindex="-1"><a class="header-anchor" href="#def-on-receive-self-filter-func-optional-filter-func-callable-callable-t-any-callable-t-any"><span>  <em><strong>def</strong></em> <code>on_receive(self, filter_func: Optional[FILTER_FUNC]) -&gt; Callable[[Callable[[T], Any]], Callable[[T], Any]]</code></span></a></h3><p> 接收数据并执行函数</p><p>Args:</p><pre><code>filter_func: 过滤函数，为None则不过滤
</code></pre><p>Returns:</p><pre><code>装饰器，装饰一个函数在接收到数据后执行
</code></pre><h3 id="var-t-typevar-t" tabindex="-1"><a class="header-anchor" href="#var-t-typevar-t"><span><em><strong>var</strong></em> <code>T = TypeVar(&#39;T&#39;)</code></span></a></h3><h3 id="var-channel-deliver-active-channel-channel-id-channel-deliver-active-channel" tabindex="-1"><a class="header-anchor" href="#var-channel-deliver-active-channel-channel-id-channel-deliver-active-channel"><span><em><strong>var</strong></em> <code>channel_deliver_active_channel = Channel(_id=&#39;channel_deliver_active_channel&#39;)</code></span></a></h3><h3 id="var-channel-deliver-passive-channel-channel-id-channel-deliver-passive-channel" tabindex="-1"><a class="header-anchor" href="#var-channel-deliver-passive-channel-channel-id-channel-deliver-passive-channel"><span><em><strong>var</strong></em> <code>channel_deliver_passive_channel = Channel(_id=&#39;channel_deliver_passive_channel&#39;)</code></span></a></h3><h3 id="var-recv-chan-data-1-recv-chan" tabindex="-1"><a class="header-anchor" href="#var-recv-chan-data-1-recv-chan"><span><em><strong>var</strong></em> <code>recv_chan = data[1][&#39;recv_chan&#39;]</code></span></a></h3><h3 id="var-recv-chan-channel-channel-any-recv-chan" tabindex="-1"><a class="header-anchor" href="#var-recv-chan-channel-channel-any-recv-chan"><span><em><strong>var</strong></em> <code>recv_chan = Channel[Channel[Any]](&#39;recv_chan&#39;)</code></span></a></h3><h3 id="var-recv-chan-channel-dict-str-channel-any-recv-chan" tabindex="-1"><a class="header-anchor" href="#var-recv-chan-channel-dict-str-channel-any-recv-chan"><span><em><strong>var</strong></em> <code>recv_chan = Channel[dict[str, Channel[Any]]](&#39;recv_chan&#39;)</code></span></a></h3><h3 id="var-type-check-self-get-generic-type-is-not-none" tabindex="-1"><a class="header-anchor" href="#var-type-check-self-get-generic-type-is-not-none"><span><em><strong>var</strong></em> <code>type_check = self._get_generic_type() is not None</code></span></a></h3><h3 id="var-data-self-conn-recv-recv" tabindex="-1"><a class="header-anchor" href="#var-data-self-conn-recv-recv"><span><em><strong>var</strong></em> <code>data = self.conn_recv.recv()</code></span></a></h3><h3 id="var-func-callback-funcs-func-id" tabindex="-1"><a class="header-anchor" href="#var-func-callback-funcs-func-id"><span><em><strong>var</strong></em> <code>func = _callback_funcs[func_id]</code></span></a></h3><h3 id="var-func-callback-funcs-func-id-1" tabindex="-1"><a class="header-anchor" href="#var-func-callback-funcs-func-id-1"><span><em><strong>var</strong></em> <code>func = _callback_funcs[func_id]</code></span></a></h3><h3 id="var-data-self-conn-recv-recv-1" tabindex="-1"><a class="header-anchor" href="#var-data-self-conn-recv-recv-1"><span><em><strong>var</strong></em> <code>data = self.conn_recv.recv()</code></span></a></h3><h3 id="var-data-self-conn-recv-recv-2" tabindex="-1"><a class="header-anchor" href="#var-data-self-conn-recv-recv-2"><span><em><strong>var</strong></em> <code>data = self.conn_recv.recv()</code></span></a></h3>`,55),r=[t];function s(d,h){return n(),a("div",null,r)}const i=e(l,[["render",s],["__file","channel.html.vue"]]),f=JSON.parse(`{"path":"/en/dev/api/comm/channel.html","title":"liteyuki.comm.channel","lang":"en-US","frontmatter":{"title":"liteyuki.comm.channel","order":1,"icon":"laptop-code","category":"API","description":"def set_channel(name: str, channel: Channel) -> None 设置通道实例 Args: def set_channels(channels: dict[str, Channel]) -> None 设置通道实例 Args: def get_channel(name: str) -> Channel 获取通道实...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://vuepress-theme-hope-docs-demo.netlify.app/dev/api/comm/channel.html"}],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/en/dev/api/comm/channel.html"}],["meta",{"property":"og:site_name","content":"LiteyukiBot"}],["meta",{"property":"og:title","content":"liteyuki.comm.channel"}],["meta",{"property":"og:description","content":"def set_channel(name: str, channel: Channel) -> None 设置通道实例 Args: def set_channels(channels: dict[str, Channel]) -> None 设置通道实例 Args: def get_channel(name: str) -> Channel 获取通道实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"liteyuki.comm.channel\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"def set_channel(name: str, channel: Channel) -> None","slug":"def-set-channel-name-str-channel-channel-none","link":"#def-set-channel-name-str-channel-channel-none","children":[]},{"level":3,"title":"def set_channels(channels: dict[str, Channel]) -> None","slug":"def-set-channels-channels-dict-str-channel-none","link":"#def-set-channels-channels-dict-str-channel-none","children":[]},{"level":3,"title":"def get_channel(name: str) -> Channel","slug":"def-get-channel-name-str-channel","link":"#def-get-channel-name-str-channel","children":[]},{"level":3,"title":"def get_channels() -> dict[str, Channel]","slug":"def-get-channels-dict-str-channel","link":"#def-get-channels-dict-str-channel","children":[]},{"level":3,"title":"def on_set_channel(data: tuple[str, dict[str, Any]]) -> None","slug":"def-on-set-channel-data-tuple-str-dict-str-any-none","link":"#def-on-set-channel-data-tuple-str-dict-str-any-none","children":[]},{"level":3,"title":"def on_get_channel(data: tuple[str, dict[str, Any]]) -> None","slug":"def-on-get-channel-data-tuple-str-dict-str-any-none","link":"#def-on-get-channel-data-tuple-str-dict-str-any-none","children":[]},{"level":3,"title":"def on_get_channels(data: tuple[str, dict[str, Any]]) -> None","slug":"def-on-get-channels-data-tuple-str-dict-str-any-none","link":"#def-on-get-channels-data-tuple-str-dict-str-any-none","children":[]},{"level":3,"title":"def decorator(func: Callable[[T], Any]) -> Callable[[T], Any]","slug":"def-decorator-func-callable-t-any-callable-t-any","link":"#def-decorator-func-callable-t-any-callable-t-any","children":[]},{"level":3,"title":"async def wrapper(data: T) -> Any","slug":"async-def-wrapper-data-t-any","link":"#async-def-wrapper-data-t-any","children":[]},{"level":3,"title":"class Channel(Generic[T])","slug":"class-channel-generic-t","link":"#class-channel-generic-t","children":[]},{"level":3,"title":"def __init__(self, _id: str, type_check: Optional[bool]) -> None","slug":"def-init-self-id-str-type-check-optional-bool-none","link":"#def-init-self-id-str-type-check-optional-bool-none","children":[]},{"level":3,"title":"def send(self, data: T) -> None","slug":"def-send-self-data-t-none","link":"#def-send-self-data-t-none","children":[]},{"level":3,"title":"def receive(self) -> T","slug":"def-receive-self-t","link":"#def-receive-self-t","children":[]},{"level":3,"title":"def close(self) -> None","slug":"def-close-self-none","link":"#def-close-self-none","children":[]},{"level":3,"title":"def on_receive(self, filter_func: Optional[FILTER_FUNC]) -> Callable[[Callable[[T], Any]], Callable[[T], Any]]","slug":"def-on-receive-self-filter-func-optional-filter-func-callable-callable-t-any-callable-t-any","link":"#def-on-receive-self-filter-func-optional-filter-func-callable-callable-t-any-callable-t-any","children":[]},{"level":3,"title":"var T = TypeVar('T')","slug":"var-t-typevar-t","link":"#var-t-typevar-t","children":[]},{"level":3,"title":"var channel_deliver_active_channel = Channel(_id='channel_deliver_active_channel')","slug":"var-channel-deliver-active-channel-channel-id-channel-deliver-active-channel","link":"#var-channel-deliver-active-channel-channel-id-channel-deliver-active-channel","children":[]},{"level":3,"title":"var channel_deliver_passive_channel = Channel(_id='channel_deliver_passive_channel')","slug":"var-channel-deliver-passive-channel-channel-id-channel-deliver-passive-channel","link":"#var-channel-deliver-passive-channel-channel-id-channel-deliver-passive-channel","children":[]},{"level":3,"title":"var recv_chan = data[1]['recv_chan']","slug":"var-recv-chan-data-1-recv-chan","link":"#var-recv-chan-data-1-recv-chan","children":[]},{"level":3,"title":"var recv_chan = Channel[Channel[Any]]('recv_chan')","slug":"var-recv-chan-channel-channel-any-recv-chan","link":"#var-recv-chan-channel-channel-any-recv-chan","children":[]},{"level":3,"title":"var recv_chan = Channel[dict[str, Channel[Any]]]('recv_chan')","slug":"var-recv-chan-channel-dict-str-channel-any-recv-chan","link":"#var-recv-chan-channel-dict-str-channel-any-recv-chan","children":[]},{"level":3,"title":"var type_check = self._get_generic_type() is not None","slug":"var-type-check-self-get-generic-type-is-not-none","link":"#var-type-check-self-get-generic-type-is-not-none","children":[]},{"level":3,"title":"var data = self.conn_recv.recv()","slug":"var-data-self-conn-recv-recv","link":"#var-data-self-conn-recv-recv","children":[]},{"level":3,"title":"var func = _callback_funcs[func_id]","slug":"var-func-callback-funcs-func-id","link":"#var-func-callback-funcs-func-id","children":[]},{"level":3,"title":"var func = _callback_funcs[func_id]","slug":"var-func-callback-funcs-func-id-1","link":"#var-func-callback-funcs-func-id-1","children":[]},{"level":3,"title":"var data = self.conn_recv.recv()","slug":"var-data-self-conn-recv-recv-1","link":"#var-data-self-conn-recv-recv-1","children":[]},{"level":3,"title":"var data = self.conn_recv.recv()","slug":"var-data-self-conn-recv-recv-2","link":"#var-data-self-conn-recv-recv-2","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"en/dev/api/comm/channel.md","autoDesc":true}`);export{i as comp,f as data};
