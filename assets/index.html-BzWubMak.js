import{_ as e,o as n,c as t,e as a}from"./app-Dk7jq3Nw.js";const s={},o=a(`<h3 id="def-get-bot-liteyukibot" tabindex="-1"><a class="header-anchor" href="#def-get-bot-liteyukibot"><span><em><strong>def</strong></em> <code>get_bot() -&gt; LiteyukiBot</code></span></a></h3><p>获取轻雪实例</p><p>Returns:</p><pre><code>LiteyukiBot: 当前的轻雪实例
</code></pre><h3 id="def-get-config-key-str-default-any-any" tabindex="-1"><a class="header-anchor" href="#def-get-config-key-str-default-any-any"><span><em><strong>def</strong></em> <code>get_config(key: str, default: Any) -&gt; Any</code></span></a></h3><p>获取配置</p><p>Args:</p><pre><code>key: 配置键

default: 默认值
</code></pre><p>Returns:</p><pre><code>Any: 配置值
</code></pre><h3 id="def-get-config-with-compat-key-str-compat-keys-tuple-str-default-any-any" tabindex="-1"><a class="header-anchor" href="#def-get-config-with-compat-key-str-compat-keys-tuple-str-default-any-any"><span><em><strong>def</strong></em> <code>get_config_with_compat(key: str, compat_keys: tuple[str], default: Any) -&gt; Any</code></span></a></h3><p>获取配置，兼容旧版本</p><p>Args:</p><pre><code>key: 配置键

compat_keys: 兼容键

default: 默认值
</code></pre><p>Returns:</p><pre><code>Any: 配置值
</code></pre><h3 id="def-print-logo-none" tabindex="-1"><a class="header-anchor" href="#def-print-logo-none"><span><em><strong>def</strong></em> <code>print_logo() -&gt; None</code></span></a></h3><h3 id="class-liteyukibot" tabindex="-1"><a class="header-anchor" href="#class-liteyukibot"><span><em><strong>class</strong></em> <code>LiteyukiBot</code></span></a></h3><h3 id="def-init-self-none" tabindex="-1"><a class="header-anchor" href="#def-init-self-none"><span>  <em><strong>def</strong></em> <code>__init__(self) -&gt; None</code></span></a></h3><p> 初始化轻雪实例</p><p>Args:</p><pre><code>*args:

**kwargs: 配置
</code></pre><h3 id="def-run-self-none" tabindex="-1"><a class="header-anchor" href="#def-run-self-none"><span>  <em><strong>def</strong></em> <code>run(self) -&gt; None</code></span></a></h3><p> 启动逻辑</p><h3 id="def-keep-alive-self-none" tabindex="-1"><a class="header-anchor" href="#def-keep-alive-self-none"><span>  <em><strong>def</strong></em> <code>keep_alive(self) -&gt; None</code></span></a></h3><p> 保持轻雪运行</p><p>Returns:</p><h3 id="def-restart-self-delay-int-none" tabindex="-1"><a class="header-anchor" href="#def-restart-self-delay-int-none"><span>  <em><strong>def</strong></em> <code>restart(self, delay: int) -&gt; None</code></span></a></h3><p> 重启轻雪本体</p><p>Returns:</p><h3 id="def-restart-process-self-name-optional-str-none" tabindex="-1"><a class="header-anchor" href="#def-restart-process-self-name-optional-str-none"><span>  <em><strong>def</strong></em> <code>restart_process(self, name: Optional[str]) -&gt; None</code></span></a></h3><p> 停止轻雪</p><p>Args:</p><pre><code>name: 进程名称, 默认为None, 所有进程
</code></pre><p>Returns:</p><h3 id="def-init-self-none-1" tabindex="-1"><a class="header-anchor" href="#def-init-self-none-1"><span>  <em><strong>def</strong></em> <code>init(self) -&gt; None</code></span></a></h3><p> 初始化轻雪, 自动调用</p><p>Returns:</p><h3 id="def-init-logger-self-none" tabindex="-1"><a class="header-anchor" href="#def-init-logger-self-none"><span>  <em><strong>def</strong></em> <code>init_logger(self) -&gt; None</code></span></a></h3><p> </p><h3 id="def-stop-self-none" tabindex="-1"><a class="header-anchor" href="#def-stop-self-none"><span>  <em><strong>def</strong></em> <code>stop(self) -&gt; None</code></span></a></h3><p> 停止轻雪</p><p>Returns:</p><h3 id="def-on-before-start-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-before-start-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_before_start(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册启动前的函数</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="def-on-after-start-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-after-start-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_after_start(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册启动后的函数</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="def-on-after-shutdown-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-after-shutdown-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_after_shutdown(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册停止后的函数：未实现</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="def-on-before-process-shutdown-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-before-process-shutdown-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_before_process_shutdown(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册进程停止前的函数，为子进程停止时调用</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="def-on-before-process-restart-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-before-process-restart-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_before_process_restart(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册进程重启前的函数，为子进程重启时调用</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="def-on-after-restart-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-after-restart-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_after_restart(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册重启后的函数：未实现</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="def-on-after-nonebot-init-self-func-lifespan-func-none" tabindex="-1"><a class="header-anchor" href="#def-on-after-nonebot-init-self-func-lifespan-func-none"><span>  <em><strong>def</strong></em> <code>on_after_nonebot_init(self, func: LIFESPAN_FUNC) -&gt; None</code></span></a></h3><p> 注册nonebot初始化后的函数</p><p>Args:</p><pre><code>func:
</code></pre><p>Returns:</p><h3 id="var-executable-sys-executable" tabindex="-1"><a class="header-anchor" href="#var-executable-sys-executable"><span><em><strong>var</strong></em> <code>executable = sys.executable</code></span></a></h3><h3 id="var-args-sys-argv" tabindex="-1"><a class="header-anchor" href="#var-args-sys-argv"><span><em><strong>var</strong></em> <code>args = sys.argv</code></span></a></h3><h3 id="var-chan-active-get-channel-f-name-active" tabindex="-1"><a class="header-anchor" href="#var-chan-active-get-channel-f-name-active"><span><em><strong>var</strong></em> <code>chan_active = get_channel(f&#39;{name}-active&#39;)</code></span></a></h3><h3 id="var-cmd-start" tabindex="-1"><a class="header-anchor" href="#var-cmd-start"><span><em><strong>var</strong></em> <code>cmd = &#39;start&#39;</code></span></a></h3><h3 id="var-chan-active-get-channel-f-process-name-active" tabindex="-1"><a class="header-anchor" href="#var-chan-active-get-channel-f-process-name-active"><span><em><strong>var</strong></em> <code>chan_active = get_channel(f&#39;{process_name}-active&#39;)</code></span></a></h3><h3 id="var-cmd-nohup" tabindex="-1"><a class="header-anchor" href="#var-cmd-nohup"><span><em><strong>var</strong></em> <code>cmd = &#39;nohup&#39;</code></span></a></h3><h3 id="var-cmd-open" tabindex="-1"><a class="header-anchor" href="#var-cmd-open"><span><em><strong>var</strong></em> <code>cmd = &#39;open&#39;</code></span></a></h3><h3 id="var-cmd-nohup-1" tabindex="-1"><a class="header-anchor" href="#var-cmd-nohup-1"><span><em><strong>var</strong></em> <code>cmd = &#39;nohup&#39;</code></span></a></h3>`,86),r=[o];function l(f,c){return n(),t("div",null,r)}const i=e(s,[["render",l],["__file","index.html.vue"]]),p=JSON.parse(`{"path":"/dev/api/bot/","title":"liteyuki.bot","lang":"zh-CN","frontmatter":{"title":"liteyuki.bot","index":true,"icon":"laptop-code","category":"API","description":"def get_bot() -> LiteyukiBot 获取轻雪实例 Returns: def get_config(key: str, default: Any) -> Any 获取配置 Args: Returns: def get_config_with_compat(key: str, compat_keys: tuple[str], defa...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://vuepress-theme-hope-docs-demo.netlify.app/en/dev/api/bot/"}],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/dev/api/bot/"}],["meta",{"property":"og:site_name","content":"LiteyukiBot 轻雪机器人"}],["meta",{"property":"og:title","content":"liteyuki.bot"}],["meta",{"property":"og:description","content":"def get_bot() -> LiteyukiBot 获取轻雪实例 Returns: def get_config(key: str, default: Any) -> Any 获取配置 Args: Returns: def get_config_with_compat(key: str, compat_keys: tuple[str], defa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-19T02:22:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-19T02:22:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"liteyuki.bot\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-19T02:22:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"def get_bot() -> LiteyukiBot","slug":"def-get-bot-liteyukibot","link":"#def-get-bot-liteyukibot","children":[]},{"level":3,"title":"def get_config(key: str, default: Any) -> Any","slug":"def-get-config-key-str-default-any-any","link":"#def-get-config-key-str-default-any-any","children":[]},{"level":3,"title":"def get_config_with_compat(key: str, compat_keys: tuple[str], default: Any) -> Any","slug":"def-get-config-with-compat-key-str-compat-keys-tuple-str-default-any-any","link":"#def-get-config-with-compat-key-str-compat-keys-tuple-str-default-any-any","children":[]},{"level":3,"title":"def print_logo() -> None","slug":"def-print-logo-none","link":"#def-print-logo-none","children":[]},{"level":3,"title":"class LiteyukiBot","slug":"class-liteyukibot","link":"#class-liteyukibot","children":[]},{"level":3,"title":"def __init__(self) -> None","slug":"def-init-self-none","link":"#def-init-self-none","children":[]},{"level":3,"title":"def run(self) -> None","slug":"def-run-self-none","link":"#def-run-self-none","children":[]},{"level":3,"title":"def keep_alive(self) -> None","slug":"def-keep-alive-self-none","link":"#def-keep-alive-self-none","children":[]},{"level":3,"title":"def restart(self, delay: int) -> None","slug":"def-restart-self-delay-int-none","link":"#def-restart-self-delay-int-none","children":[]},{"level":3,"title":"def restart_process(self, name: Optional[str]) -> None","slug":"def-restart-process-self-name-optional-str-none","link":"#def-restart-process-self-name-optional-str-none","children":[]},{"level":3,"title":"def init(self) -> None","slug":"def-init-self-none-1","link":"#def-init-self-none-1","children":[]},{"level":3,"title":"def init_logger(self) -> None","slug":"def-init-logger-self-none","link":"#def-init-logger-self-none","children":[]},{"level":3,"title":"def stop(self) -> None","slug":"def-stop-self-none","link":"#def-stop-self-none","children":[]},{"level":3,"title":"def on_before_start(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-before-start-self-func-lifespan-func-none","link":"#def-on-before-start-self-func-lifespan-func-none","children":[]},{"level":3,"title":"def on_after_start(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-after-start-self-func-lifespan-func-none","link":"#def-on-after-start-self-func-lifespan-func-none","children":[]},{"level":3,"title":"def on_after_shutdown(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-after-shutdown-self-func-lifespan-func-none","link":"#def-on-after-shutdown-self-func-lifespan-func-none","children":[]},{"level":3,"title":"def on_before_process_shutdown(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-before-process-shutdown-self-func-lifespan-func-none","link":"#def-on-before-process-shutdown-self-func-lifespan-func-none","children":[]},{"level":3,"title":"def on_before_process_restart(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-before-process-restart-self-func-lifespan-func-none","link":"#def-on-before-process-restart-self-func-lifespan-func-none","children":[]},{"level":3,"title":"def on_after_restart(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-after-restart-self-func-lifespan-func-none","link":"#def-on-after-restart-self-func-lifespan-func-none","children":[]},{"level":3,"title":"def on_after_nonebot_init(self, func: LIFESPAN_FUNC) -> None","slug":"def-on-after-nonebot-init-self-func-lifespan-func-none","link":"#def-on-after-nonebot-init-self-func-lifespan-func-none","children":[]},{"level":3,"title":"var executable = sys.executable","slug":"var-executable-sys-executable","link":"#var-executable-sys-executable","children":[]},{"level":3,"title":"var args = sys.argv","slug":"var-args-sys-argv","link":"#var-args-sys-argv","children":[]},{"level":3,"title":"var chan_active = get_channel(f'{name}-active')","slug":"var-chan-active-get-channel-f-name-active","link":"#var-chan-active-get-channel-f-name-active","children":[]},{"level":3,"title":"var cmd = 'start'","slug":"var-cmd-start","link":"#var-cmd-start","children":[]},{"level":3,"title":"var chan_active = get_channel(f'{process_name}-active')","slug":"var-chan-active-get-channel-f-process-name-active","link":"#var-chan-active-get-channel-f-process-name-active","children":[]},{"level":3,"title":"var cmd = 'nohup'","slug":"var-cmd-nohup","link":"#var-cmd-nohup","children":[]},{"level":3,"title":"var cmd = 'open'","slug":"var-cmd-open","link":"#var-cmd-open","children":[]},{"level":3,"title":"var cmd = 'nohup'","slug":"var-cmd-nohup-1","link":"#var-cmd-nohup-1","children":[]}],"git":{"createdTime":1724031826000,"updatedTime":1724034144000,"contributors":[{"name":"snowy","email":"snowykami@outlook.com","commits":4}]},"readingTime":{"minutes":1.35,"words":404},"filePathRelative":"dev/api/bot/README.md","localizedDate":"2024年8月19日","autoDesc":true}`);export{i as comp,p as data};
